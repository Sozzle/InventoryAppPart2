package com.example.android.inventoryapppart2;

import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CursorAdapter;
import android.widget.TextView;
import android.widget.Toast;
import com.example.android.inventoryapppart2.data.BookContract;
import com.example.android.inventoryapppart2.data.BookContract.BookEntry;

public class BookCursorAdapter extends CursorAdapter {

    /**
     * Constructs a new {@link BookCursorAdapter}.
     *
     * @param context The context
     * @param c       The cursor from which to get the data.
     */
    public BookCursorAdapter(Context context, Cursor c) {
        super(context, c, 0 /* flags */);
    }

    /**
     * Makes a new blank list item view. No data is set (or bound) to the views yet.
     *
     * @param context app context
     * @param cursor  The cursor from which to get the data. The cursor is already
     *                moved to the correct position.
     * @param parent  The parent to which the new view is attached to
     * @return the newly created list item view.
     */
    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
        // Inflate a list item view using the layout specified in list_item.xml
        return LayoutInflater.from(context).inflate(R.layout.list_item, parent, false);
    }

    @Override
    public void bindView(View view, final Context context, Cursor cursor) {
        TextView productNameTextView = (TextView) view.findViewById(R.id.product_name);
        TextView priceTextView = (TextView) view.findViewById(R.id.price);
        TextView quantityTextView = (TextView) view.findViewById(R.id.quantity);
        TextView supplierNameTextView = (TextView) view.findViewById(R.id.supplier_name);
        TextView supplierPhoneNumberTextView = (TextView) view.findViewById(R.id.supplier_phone_number);
        Button saleButton = (Button) view.findViewById(R.id.button_sale);

        // Find the columns of product attributes that we're interested in
        int productNameColumnIndex = cursor.getColumnIndex(BookContract.BookEntry.COLUMN_PRODUCT_NAME);
        int priceColumnIndex = cursor.getColumnIndex(BookContract.BookEntry.COLUMN_PRICE);
        int quantityColumnIndex = cursor.getColumnIndex(BookContract.BookEntry.COLUMN_QUANTITY);
        int supplierNameColumnIndex = cursor.getColumnIndex(BookContract.BookEntry.COLUMN_PRODUCT_SUPPLIER_NAME);
        int supplierPhoneNumberColumnIndex = cursor.getColumnIndex(BookContract.BookEntry.COLUMN_PRODUCT_SUPPLIER_PHONE_NUMBER);
        // Read the book attributes from the Cursor for the current book
        String productName = cursor.getString(productNameColumnIndex);
        Integer price = cursor.getInt(priceColumnIndex);
        final Integer quantity = cursor.getInt(quantityColumnIndex);
        String supplierName = cursor.getString(supplierNameColumnIndex);
        String supplierPhoneNumber = cursor.getString(supplierPhoneNumberColumnIndex);
        // Update the TextViews with the attributes for the current book
        productNameTextView.setText(productName);
        priceTextView.setText(price + "");
        quantityTextView.setText(quantity + "");
        supplierNameTextView.setText(supplierName);
        supplierPhoneNumberTextView.setText(supplierPhoneNumber);
        final int stockQuantity = Integer.valueOf(quantity);

        final int currentBookId = cursor.getInt(cursor.getColumnIndex(BookEntry._ID));


        //Set up the sale button to decrement when the user clicks on it

        saleButton.setOnClickListener(new View.OnClickListener() {

            @Override

            public void onClick(View view) {

                //Let's the user only decrement when the stockQuantity of books is > 0

                if (stockQuantity > 0) {

                    int decrementedQuantity = stockQuantity - 1;


                    //Get the URI with the ID for the row

                    Uri quantityUri = ContentUris.withAppendedId(BookEntry.CONTENT_URI, currentBookId);


                    //Update the database with the new quantity value

                    ContentValues values = new ContentValues();

                    values.put(BookEntry.COLUMN_QUANTITY, decrementedQuantity);

                    context.getContentResolver().update(quantityUri, values, null, null);

                } else {

//Show an error when the quantity reaches 0

                    Toast.makeText(context, R.string.out_of_stock_message, Toast.LENGTH_SHORT).show();
                }
            }

        });

    }

}
